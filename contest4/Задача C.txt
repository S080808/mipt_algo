#include <iostream>
#include <memory>
#include <string>
#include <vector>
typedef std::pair<std::string, std::string> Pair;

struct Node {
  Pair val;
  int height;
  std::shared_ptr<Node> left_child;
  std::shared_ptr<Node> right_child;
  Node(Pair& value)
      : val(value), height(1), left_child(nullptr), right_child(nullptr) {}
};

class AVLTree {
 public:
  AVLTree() : tree(nullptr) {}

  void Add(const Pair& val) { Insert(tree, val); }
  std::string Find(std::string val) {
    return FindVal(tree, val) ? FindVal(tree, val)->val.second : "";
  }

 private:
  void Insert(std::shared_ptr<Node>& node, Pair val) {
    if (!node) {
      node = std::make_shared<Node>(val);
      return;
    }

    if (val > node->val) {
      Insert(node->right_child, val);
    } else if (val < node->val) {
      Insert(node->left_child, val);
    } else {
      return;
    }

    node->height =
        1 + std::max(GetHeight(node->left_child), GetHeight(node->right_child));

    if (GetDiff(node) == -2 && (GetDiff(node->right_child) <= 0)) {
      node = LeftRotate(node);
    } else if (GetDiff(node) == -2) {
      node->right_child = RightRotate(node->right_child);
      node = LeftRotate(node);
    }

    if (GetDiff(node) == 2 && (GetDiff(node->left_child) >= 0)) {
      node = RightRotate(node);
    } else if (GetDiff(node) == 2) {
      node->left_child = LeftRotate(node->left_child);
      node = RightRotate(node);
    }
  }

  std::shared_ptr<Node> FindVal(std::shared_ptr<Node>& node,
                                const std::string& key) {
    if (node == nullptr) {
      return nullptr;
    }
    if (node->val.first < key) {
      return FindVal(node->right_child, key);
    }
    return node->val.first > key ? FindVal(node->left_child, key) : node;
  }

  static int GetHeight(std::shared_ptr<Node>& node) {
    if (!node) {
      return 0;
    }
    return node->height;
  }

  static int GetDiff(std::shared_ptr<Node>& node) {
    if (!node) {
      return 0;
    }
    return GetHeight(node->left_child) - GetHeight(node->right_child);
  }

  static std::shared_ptr<Node> RightRotate(std::shared_ptr<Node>& parent) {
    std::shared_ptr<Node> sub_node = parent->left_child;
    std::shared_ptr<Node> sub_tree = sub_node->right_child;
    sub_node->right_child = parent;
    parent->left_child = sub_tree;

    parent->height = std::max(GetHeight(parent->left_child),
                              GetHeight(parent->right_child)) +
                     1;
    sub_node->height = std::max(GetHeight(sub_node->left_child),
                                GetHeight(sub_node->right_child)) +
                       1;

    return sub_node;
  }

  static std::shared_ptr<Node> LeftRotate(std::shared_ptr<Node>& parent) {
    std::shared_ptr<Node> sub_node = parent->right_child;
    std::shared_ptr<Node> sub_tree = sub_node->left_child;
    sub_node->left_child = parent;
    parent->right_child = sub_tree;

    parent->height = std::max(GetHeight(parent->left_child),
                              GetHeight(parent->right_child)) +
                     1;
    sub_node->height = std::max(GetHeight(sub_node->left_child),
                                GetHeight(sub_node->right_child)) +
                       1;

    return sub_node;
  }

 public:
  std::shared_ptr<Node> tree;
};

void Actions(int req_num, AVLTree& name_tree, AVLTree& car_tree) {
  std::cin >> req_num;
  for (int i = 0; i < req_num; ++i) {
    std::string key;
    std::cin >> key;
    std::string tmp = name_tree.Find(key);
    std::cout << tmp;
    if (tmp.empty()) {
      std::cout << car_tree.Find(key);
    }
    std::cout << '\n';
  }
}

int main() {
  std::ios::sync_with_stdio(false);
  std::cin.tie(nullptr);
  std::cout.tie(nullptr);
  AVLTree name_tree;
  AVLTree car_tree;
  int input_num = 0;
  int req_num = 0;

  std::cin >> input_num;
  for (int i = 0; i < input_num; ++i) {
    std::string name;
    std::string car;
    std::cin >> name >> car;
    name_tree.Add({name, car});
    name_tree.Add({car, name});
  }
  Actions(req_num, name_tree, car_tree);
}
